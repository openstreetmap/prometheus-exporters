#!/usr/bin/ruby

require "json"

STATUS_BITS = [
  "command_not_parsed",
  "device_open_failed",
  "device_command_failed",
  "disk_failing",
  "prefail_below_threshold",
  "previous_below_threshold",
  "error_log_has_errors",
  "selftest_log_has_errors"
]

devices = []

IO.read("/etc/prometheus/collectors/smart.devices").split("\n") do |line|
  device, type = line.split("|")

  if type
    io = IO.popen(["smartctl", "-n", "standby", "-x", "-j", "-d", type, device])
  else
    io = IO.popen(["smartctl", "-n", "standby", "-x", "-j", device])
  end

  output = JSON.load(io)

  next unless output["device"]

  data = {
    :device => output["device"]["info_name"].sub(/\s+\[(?:SAT|SCSI)\]$/, ""),
    :protocol => output["device"]["protocol"],
    :serial_number => output["serial_number"]
  }

  if data[:protocol] == "SCSI"
    data[:vendor] = output["vendor"]
    data[:product] = output["product"]
    data[:firmware_version] = output["revision"]
  elsif output["model_name"] =~ / /
    data[:vendor], data[:product] = output["model_name"].split
    data[:firmware_version] = output["firmware_version"]
  else
    data[:product] = output["model_name"]
    data[:firmware_version] = output["firmware_version"]
  end

  if data[:protocol] == "NVMe"
    data[:rotation_rate] = "0"
  else
    data[:rotation_rate] = output["rotation_rate"]
  end

  data[:labels] = data.collect { |key, value| "#{key}=\"#{value}\"" }.join(",")

  data[:exit_status] = output["smartctl"]["exit_status"]

  if output["smart_status"]
    data[:health_status] = if output["smart_status"]["passed"] == true
                             1
                           else
                             0
                           end
  end

  if output["user_capacity"]
    data[:capacity_bytes] = output["user_capacity"]["bytes"]
  elsif output["nvme_total_capacity"]
    data[:capacity_bytes] = output["nvme_total_capacity"]
  end

  if output["temperature"]
    data[:temperature_celsius] = output["temperature"]["current"]
  end

  if output["power_cycle_count"]
    data[:power_cycle_count] = output["power_cycle_count"]
  elsif output["ata_smart_attributes"]
    start_stop_count = output["ata_smart_attributes"]["table"].find do |attribute|
      attribute["name"] == "Start_Stop_Count"
    end

    if start_stop_count
      data[:power_cycle_count] = start_stop_count["raw"]["value"]
    end
  end

  if output["power_on_time"]
    power_on_hours = output["power_on_time"]["hours"].to_i
    power_on_minutes = output["power_on_time"]["hours"].to_i || 0

    data[:power_on_seconds] = power_on_hours * 3600 + power_on_minutes * 60
  end

  if output["scsi_percentage_used_endurance_indicator"]
    data[:percentage_used] = output["scsi_percentage_used_endurance_indicator"]
  elsif output["nvme_smart_health_information_log"]
    data[:percentage_used] = output["nvme_smart_health_information_log"]["percentage_used"]
  elsif output["ata_smart_attributes"]
    media_wearout_indicator = output["ata_smart_attributes"]["table"].find do |attribute|
      attribute["name"] == "Media_Wearout_Indicator"
    end

    if media_wearout_indicator
      data[:percentage_used] = 100 - media_wearout_indicator["value"]
    end
  end

  if output["scsi_error_counter_log"]
    data[:read_bytes_total] = output["scsi_error_counter_log"]["read"]["gigabytes_processed"].to_f * 1024 * 1024 * 1024
    data[:write_bytes_total] = output["scsi_error_counter_log"]["write"]["gigabytes_processed"].to_f * 1024 * 1024 * 1024
  elsif output["nvme_smart_health_information_log"]
    logical_block_size = output["logical_block_size"] || 512
    
    data[:read_bytes_total] = output["nvme_smart_health_information_log"]["data_units_read"] * logical_block_size
    data[:write_bytes_total] = output["nvme_smart_health_information_log"]["data_units_written"] * logical_block_size
  elsif output["ata_smart_attributes"]
    host_reads_32mib = output["ata_smart_attributes"]["table"].find do |attribute|
      attribute["name"] == "Host_Reads_32MiB"
    end

    host_writes_32mib = output["ata_smart_attributes"]["table"].find do |attribute|
      attribute["name"] == "Host_Writes_32MiB"
    end

    if host_reads_32mib
      data[:read_bytes_total] = host_reads_32mib["raw"]["value"] * 32 * 1024 * 1024
    end

    if host_writes_32mib
      data[:write_bytes_total] = host_writes_32mib["raw"]["value"] * 32 * 1024 * 1024
    end
  end

  devices << data
end

puts "# HELP smart_info Device information"
puts "# TYPE smart_info gauge"

devices.each do |data|
  puts "smart_info{#{data[:labels]}} 1"
end

puts "# HELP smart_command_status Flag values from smartctl exit status"
puts "# TYPE smart_command_status gauge"

devices.each do |data|
  STATUS_BITS.each_with_index do |name, bit|
    value = (data[:exit_status] >> bit) & 1

    puts "smart_command_status{device=\"#{data[:device]}\",flag=\"#{name}\"} #{value}"
  end
end

puts "# HELP smart_health_status Overall health status (0 = fail, 1 = pass)"
puts "# TYPE smart_health_status gauge"

devices.each do |data|
  if data[:health_status]
    puts "smart_health_status{device=\"#{data[:device]}\"} #{data[:health_status]}"
  end
end

puts "# HELP smart_capacity_bytes Capacity of the device in bytes"
puts "# TYPE smart_capacity_bytes gauge"

devices.each do |data|
  if data[:capacity_bytes]
    puts "smart_capacity_bytes{device=\"#{data[:device]}\"} #{data[:capacity_bytes]}"
  end
end

puts "# HELP smart_temperature_celsius Temperature of the device in degrees celsius"
puts "# TYPE smart_temperature_celsius gauge"

devices.each do |data|
  if data[:temperature_celsius]
    puts "smart_temperature_celsius{device=\"#{data[:device]}\"} #{data[:temperature_celsius]}"
  end
end

puts "# HELP smart_power_cycle_count Number of times the device has been power cycled"
puts "# TYPE smart_power_cycle_count gauge"

devices.each do |data|
  if data[:power_cycle_count]
    puts "smart_power_cycle_count{device=\"#{data[:device]}\"} #{data[:power_cycle_count]}"
  end
end

puts "# HELP smart_power_on_seconds Number of seconds the device has been powered on"
puts "# TYPE smart_power_on_seconds gauge"

devices.each do |data|
  if data[:power_on_seconds]
    puts "smart_power_on_seconds{device=\"#{data[:device]}\"} #{data[:power_on_seconds]}"
  end
end

puts "# HELP smart_percentage_used Percentage of device's expected life which has been used"
puts "# TYPE smart_percentage_used gauge"

devices.each do |data|
  if data[:percentage_used]
    puts "smart_percentage_used{device=\"#{data[:device]}\"} #{data[:percentage_used]}"
  end
end

puts "# HELP smart_read_bytes_total Total number of bytes read"
puts "# TYPE smart_read_bytes_total counter"

devices.each do |data|
  if data[:read_bytes_total]
    puts "smart_read_bytes_total{device=\"#{data[:device]}\"} #{data[:read_bytes_total]}"
  end
end

puts "# HELP smart_write_bytes_total Total number of bytes written"
puts "# TYPE smart_write_bytes_total counter"

devices.each do |data|
  if data[:write_bytes_total]
    puts "smart_write_bytes_total{device=\"#{data[:device]}\"} #{data[:write_bytes_total]}"
  end
end

exit 0
